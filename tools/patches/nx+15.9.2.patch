diff --git a/node_modules/nx/src/command-line/workspace-generators.js b/node_modules/nx/src/command-line/workspace-generators.js
index 807d811..099a1a6 100644
--- a/node_modules/nx/src/command-line/workspace-generators.js
+++ b/node_modules/nx/src/command-line/workspace-generators.js
@@ -17,10 +17,10 @@ const logger_1 = require("../utils/logger");
 const package_manager_1 = require("../utils/package-manager");
 const path_1 = require("../utils/path");
 const nx_commands_1 = require("./nx-commands");
-const rootDirectory = workspace_root_1.workspaceRoot;
-const toolsDir = path.join(rootDirectory, 'tools');
-const generatorsDir = path.join(toolsDir, 'generators');
-const toolsTsConfigPath = path.join(toolsDir, 'tsconfig.tools.json');
+const rootDirectory = () => workspace_root_1.workspaceRoot;
+const toolsDir = () => path.join(rootDirectory(), 'tools');
+const generatorsDir = () => path.join(toolsDir(), 'generators');
+const toolsTsConfigPath = () => path.join(toolsDir(), 'tsconfig.tools.json');
 function workspaceGenerators(args) {
     return tslib_1.__awaiter(this, void 0, void 0, function* () {
         const outDir = compileTools();
@@ -36,7 +36,7 @@ function workspaceGenerators(args) {
 }
 exports.workspaceGenerators = workspaceGenerators;
 function workspaceGeneratorSchema(name) {
-    const schemaFile = path.join(generatorsDir, name, 'schema.json');
+    const schemaFile = path.join(generatorsDir(), name, 'schema.json');
     if ((0, fileutils_1.fileExists)(schemaFile)) {
         return (0, fileutils_2.readJsonFile)(schemaFile);
     }
@@ -59,22 +59,22 @@ function compileTools() {
 function getToolsOutDir() {
     const outDir = toolsTsConfig().compilerOptions.outDir;
     if (!outDir) {
-        logger_1.logger.error(`${toolsTsConfigPath} must specify an outDir`);
+        logger_1.logger.error(`${toolsTsConfigPath()} must specify an outDir`);
         process.exit(1);
     }
-    return path.resolve(toolsDir, outDir);
+    return path.resolve(toolsDir(), outDir);
 }
 function compileToolsDir(outDir) {
-    (0, fs_extra_1.copySync)(generatorsDir, path.join(outDir, 'generators'));
-    const tmpTsConfigPath = createTmpTsConfig(toolsTsConfigPath, {
-        include: [path.join(generatorsDir, '**/*.ts')],
+    (0, fs_extra_1.copySync)(generatorsDir(), path.join(outDir, 'generators'));
+    const tmpTsConfigPath = createTmpTsConfig(toolsTsConfigPath(), {
+        include: [path.join(generatorsDir(), '**/*.ts')],
     });
     const pmc = (0, package_manager_1.getPackageManagerCommand)();
     const tsc = `${pmc.exec} tsc`;
     try {
         (0, child_process_1.execSync)(`${tsc} -p ${tmpTsConfigPath}`, {
             stdio: 'inherit',
-            cwd: rootDirectory,
+            cwd: rootDirectory(),
         });
     }
     catch (_a) {
@@ -84,8 +84,8 @@ function compileToolsDir(outDir) {
 function constructCollection() {
     const generators = {};
     const schematics = {};
-    (0, fs_1.readdirSync)(generatorsDir).forEach((c) => {
-        const childDir = path.join(generatorsDir, c);
+    (0, fs_1.readdirSync)(generatorsDir()).forEach((c) => {
+        const childDir = path.join(generatorsDir(), c);
         if ((0, fs_1.existsSync)(path.join(childDir, 'schema.json'))) {
             const generatorOrSchematic = {
                 factory: `./${c}`,
@@ -109,7 +109,7 @@ function constructCollection() {
     };
 }
 function toolsTsConfig() {
-    return (0, fileutils_2.readJsonFile)(toolsTsConfigPath);
+    return (0, fileutils_2.readJsonFile)(toolsTsConfigPath());
 }
 function listGenerators(collectionFile) {
     try {
diff --git a/node_modules/nx/src/daemon/server/watcher.js b/node_modules/nx/src/daemon/server/watcher.js
index e2f07fb..9337233 100644
--- a/node_modules/nx/src/daemon/server/watcher.js
+++ b/node_modules/nx/src/daemon/server/watcher.js
@@ -17,7 +17,7 @@ const path_2 = require("../../utils/path");
 const ignore_1 = require("../../utils/ignore");
 const os_1 = require("os");
 const cache_1 = require("../cache");
-const ALWAYS_IGNORE = [...(0, ignore_1.getAlwaysIgnore)(workspace_root_1.workspaceRoot), socket_utils_1.FULL_OS_SOCKET_PATH];
+const ALWAYS_IGNORE = () => [...(0, ignore_1.getAlwaysIgnore)(workspace_root_1.workspaceRoot), socket_utils_1.FULL_OS_SOCKET_PATH];
 function subscribeToOutputsChanges(cb) {
     return tslib_1.__awaiter(this, void 0, void 0, function* () {
         const watcher = yield Promise.resolve().then(() => require('@parcel/watcher'));
@@ -36,7 +36,7 @@ function subscribeToOutputsChanges(cb) {
                 }
                 cb(null, workspaceRelativeEvents);
             }
-        }, watcherOptions([...ALWAYS_IGNORE]));
+        }, watcherOptions([...ALWAYS_IGNORE()]));
     });
 }
 exports.subscribeToOutputsChanges = subscribeToOutputsChanges;
diff --git a/node_modules/nx/src/plugins/js/index.js b/node_modules/nx/src/plugins/js/index.js
index d99421a..1ffd035 100644
--- a/node_modules/nx/src/plugins/js/index.js
+++ b/node_modules/nx/src/plugins/js/index.js
@@ -17,9 +17,9 @@ const remove_npm_nodes_1 = require("nx/src/plugins/js/lock-file/remove-npm-nodes
 const processProjectGraph = (graph, context) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
     var _a;
     const builder = new project_graph_builder_1.ProjectGraphBuilder(graph);
-    const lockHash = (_a = (0, lock_file_1.lockFileHash)()) !== null && _a !== void 0 ? _a : 'n/a';
     // during the create-nx-workspace lock file might not exists yet
     if ((0, lock_file_1.lockFileExists)()) {
+        const lockHash = (_a = (0, lock_file_1.lockFileHash)()) !== null && _a !== void 0 ? _a : 'n/a';
         if (lockFileNeedsReprocessing(lockHash)) {
             (0, remove_npm_nodes_1.removeNpmNodes)(graph, builder);
             (0, lock_file_1.parseLockFile)(builder);
diff --git a/node_modules/nx/src/plugins/js/lock-file/lock-file.js b/node_modules/nx/src/plugins/js/lock-file/lock-file.js
index e8d5c03..9386620 100644
--- a/node_modules/nx/src/plugins/js/lock-file/lock-file.js
+++ b/node_modules/nx/src/plugins/js/lock-file/lock-file.js
@@ -20,21 +20,21 @@ const package_json_1 = require("./utils/package-json");
 const YARN_LOCK_FILE = 'yarn.lock';
 const NPM_LOCK_FILE = 'package-lock.json';
 const PNPM_LOCK_FILE = 'pnpm-lock.yaml';
-const YARN_LOCK_PATH = (0, path_1.join)(workspace_root_1.workspaceRoot, YARN_LOCK_FILE);
-const NPM_LOCK_PATH = (0, path_1.join)(workspace_root_1.workspaceRoot, NPM_LOCK_FILE);
-const PNPM_LOCK_PATH = (0, path_1.join)(workspace_root_1.workspaceRoot, PNPM_LOCK_FILE);
+const YARN_LOCK_PATH = () => (0, path_1.join)(workspace_root_1.workspaceRoot, YARN_LOCK_FILE);
+const NPM_LOCK_PATH = () => (0, path_1.join)(workspace_root_1.workspaceRoot, NPM_LOCK_FILE);
+const PNPM_LOCK_PATH = () =>(0, path_1.join)(workspace_root_1.workspaceRoot, PNPM_LOCK_FILE);
 /**
  * Check if lock file exists
  */
 function lockFileExists(packageManager = (0, package_manager_1.detectPackageManager)(workspace_root_1.workspaceRoot)) {
     if (packageManager === 'yarn') {
-        return (0, fs_1.existsSync)(YARN_LOCK_PATH);
+        return (0, fs_1.existsSync)(YARN_LOCK_PATH());
     }
     if (packageManager === 'pnpm') {
-        return (0, fs_1.existsSync)(PNPM_LOCK_PATH);
+        return (0, fs_1.existsSync)(PNPM_LOCK_PATH());
     }
     if (packageManager === 'npm') {
-        return (0, fs_1.existsSync)(NPM_LOCK_PATH);
+        return (0, fs_1.existsSync)(NPM_LOCK_PATH());
     }
     throw new Error(`Unknown package manager ${packageManager} or lock file missing`);
 }
@@ -45,13 +45,13 @@ exports.lockFileExists = lockFileExists;
 function lockFileHash(packageManager = (0, package_manager_1.detectPackageManager)(workspace_root_1.workspaceRoot)) {
     let content;
     if (packageManager === 'yarn') {
-        content = (0, fs_1.readFileSync)(YARN_LOCK_PATH, 'utf8');
+        content = (0, fs_1.readFileSync)(YARN_LOCK_PATH(), 'utf8');
     }
     if (packageManager === 'pnpm') {
-        content = (0, fs_1.readFileSync)(PNPM_LOCK_PATH, 'utf8');
+        content = (0, fs_1.readFileSync)(PNPM_LOCK_PATH(), 'utf8');
     }
     if (packageManager === 'npm') {
-        content = (0, fs_1.readFileSync)(NPM_LOCK_PATH, 'utf8');
+        content = (0, fs_1.readFileSync)(NPM_LOCK_PATH(), 'utf8');
     }
     if (content) {
         return hashing_impl_1.defaultHashing.hashArray([content]);
@@ -67,17 +67,17 @@ exports.lockFileHash = lockFileHash;
 function parseLockFile(builder, packageManager = (0, package_manager_1.detectPackageManager)(workspace_root_1.workspaceRoot)) {
     try {
         if (packageManager === 'yarn') {
-            const content = (0, fs_1.readFileSync)(YARN_LOCK_PATH, 'utf8');
+            const content = (0, fs_1.readFileSync)(YARN_LOCK_PATH(), 'utf8');
             (0, yarn_parser_1.parseYarnLockfile)(content, builder);
             return builder.getUpdatedProjectGraph();
         }
         if (packageManager === 'pnpm') {
-            const content = (0, fs_1.readFileSync)(PNPM_LOCK_PATH, 'utf8');
+            const content = (0, fs_1.readFileSync)(PNPM_LOCK_PATH(), 'utf8');
             (0, pnpm_parser_1.parsePnpmLockfile)(content, builder);
             return builder.getUpdatedProjectGraph();
         }
         if (packageManager === 'npm') {
-            const content = (0, fs_1.readFileSync)(NPM_LOCK_PATH, 'utf8');
+            const content = (0, fs_1.readFileSync)(NPM_LOCK_PATH(), 'utf8');
             (0, npm_parser_1.parseNpmLockfile)(content, builder);
             return builder.getUpdatedProjectGraph();
         }
diff --git a/node_modules/nx/src/utils/typescript.js b/node_modules/nx/src/utils/typescript.js
index f1d8fd4..23ce712 100644
--- a/node_modules/nx/src/utils/typescript.js
+++ b/node_modules/nx/src/utils/typescript.js
@@ -4,7 +4,7 @@ exports.findNodes = exports.getRootTsConfigPath = exports.getRootTsConfigFileNam
 const workspace_root_1 = require("./workspace-root");
 const fs_1 = require("fs");
 const path_1 = require("path");
-const normalizedAppRoot = workspace_root_1.workspaceRoot.replace(/\\/g, '/');
+const normalizedAppRoot = () => workspace_root_1.workspaceRoot.replace(/\\/g, '/');
 let tsModule;
 function readTsConfig(tsConfigPath) {
     if (!tsModule) {
@@ -43,7 +43,7 @@ function resolveModuleByImport(importExpr, filePath, tsConfigPath) {
         return;
     }
     else {
-        return resolvedModule.resolvedFileName.replace(`${normalizedAppRoot}/`, '');
+        return resolvedModule.resolvedFileName.replace(`${normalizedAppRoot()}/`, '');
     }
 }
 exports.resolveModuleByImport = resolveModuleByImport;
diff --git a/node_modules/nx/src/utils/workspace-root.d.ts b/node_modules/nx/src/utils/workspace-root.d.ts
index b5b7223..837c6bb 100644
--- a/node_modules/nx/src/utils/workspace-root.d.ts
+++ b/node_modules/nx/src/utils/workspace-root.d.ts
@@ -2,4 +2,5 @@
  * The root of the workspace
  */
 export declare const workspaceRoot: string;
+export declare function setWorkspaceRoot(root: string): void;
 export declare function workspaceRootInner(dir: string, candidateRoot: string | null): string;
diff --git a/node_modules/nx/src/utils/workspace-root.js b/node_modules/nx/src/utils/workspace-root.js
index c0100be..7b0940b 100644
--- a/node_modules/nx/src/utils/workspace-root.js
+++ b/node_modules/nx/src/utils/workspace-root.js
@@ -7,6 +7,12 @@ const fileutils_1 = require("./fileutils");
  * The root of the workspace
  */
 exports.workspaceRoot = workspaceRootInner(process.cwd(), process.cwd());
+
+function setWorkspaceRoot(root) {
+    exports.workspaceRoot = root;
+}
+exports.setWorkspaceRoot = setWorkspaceRoot;
+
 function workspaceRootInner(dir, candidateRoot) {
     if (process.env.NX_WORKSPACE_ROOT_PATH)
         return process.env.NX_WORKSPACE_ROOT_PATH;
